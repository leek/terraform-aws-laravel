name: Update Changelog

on:
  workflow_run:
    workflows: ["Deploy to AWS ECS"]
    types: [completed]
  workflow_dispatch:
    inputs:
      tag_name:
        description: "Release tag (optional; defaults to latest published release)"
        required: false
        type: string

permissions:
  contents: write
  pull-requests: write

concurrency:
  group: update-changelog-${{ github.ref || 'manual' }}
  cancel-in-progress: false

jobs:
  update-changelog:
    if: >
      (github.event_name == 'workflow_run' &&
       github.event.workflow_run.conclusion == 'success' &&
       github.event.workflow_run.head_branch == 'production')
      || (github.event_name == 'workflow_dispatch')

    runs-on: ubuntu-latest

    steps:
      - name: Resolve release (by tag or latest)
        id: rel
        uses: actions/github-script@v7
        with:
          script: |
            const owner = context.repo.owner;
            const repo  = context.repo.repo;
            const tag   = core.getInput('tag_name');

            let release;
            try {
              if (tag) {
                release = (await github.rest.repos.getReleaseByTag({ owner, repo, tag })).data;
              } else {
                release = (await github.rest.repos.getLatestRelease({ owner, repo })).data;
              }
            } catch (e) {
              core.warning(`No release found (${e.status || ''}). Skipping changelog update.`);
              core.setOutput('tag', '');
              core.setOutput('body', '');
              return;
            }

            core.setOutput('tag', release.tag_name || '');
            core.setOutput('body', release.body || '');

      - name: Checkout main
        uses: actions/checkout@v4
        with:
          ref: main
          fetch-depth: 0

      - name: Ensure CHANGELOG.md exists
        shell: bash
        run: |
          if [ ! -f CHANGELOG.md ]; then
            printf '# Changelog\n\n## [Unreleased]\n\n---\n\n' > CHANGELOG.md
          fi
          # Ensure LF endings for parsing
          sed -i 's/\r$//' CHANGELOG.md

      - name: Update CHANGELOG.md
        env:
          VERSION: ${{ steps.rel.outputs.tag }}
          RELEASE_NOTES: ${{ steps.rel.outputs.body }}
        run: |
          set -e
          RELEASE_DATE=$(date +%Y-%m-%d)
          TMP_FILE=$(mktemp)

          UNRELEASED_CONTENT=$(awk '
            /^## \[Unreleased\]/ { in_unreleased=1; next }
            /^## / { in_unreleased=0 }
            in_unreleased && NF { print }
          ' CHANGELOG.md | sed '/^---$/,$d')

          GITHUB_NOTES=$(echo "$RELEASE_NOTES" | awk '
            BEGIN { in_changes=0; in_deployment=0 }
            /^## Deployment Information/ { in_deployment=1; next }
            /^## Changes/ { in_changes=1; next }
            /^## What/ { in_changes=1; next }
            /^##/ { in_changes=0; in_deployment=0; next }
            /^\*\*Full Changelog\*\*/ { next }
            in_changes && /^[*-]/ { print }
            !in_deployment && !in_changes && /^[*-]/ { print }
          ')

          COMBINED_CONTENT="${UNRELEASED_CONTENT}"
          if [ -n "$GITHUB_NOTES" ]; then
            if [ -n "$COMBINED_CONTENT" ]; then
              COMBINED_CONTENT="${COMBINED_CONTENT}"$'\n\n'"### GitHub Release Notes"
            else
              COMBINED_CONTENT="### GitHub Release Notes"
            fi
            while IFS= read -r line; do
              if [[ -n "$line" && "$line" =~ ^[*-] ]]; then
                echo "$line" | sed 's/^\* /- /' >> /tmp/gh_notes.txt
              fi
            done <<< "$GITHUB_NOTES"
            if [ -f /tmp/gh_notes.txt ]; then
              COMBINED_CONTENT="${COMBINED_CONTENT}"$'\n'"$(cat /tmp/gh_notes.txt)"
            fi
          fi

          NEW_RELEASE_SECTION="## [${VERSION}] - ${RELEASE_DATE}"

          {
            awk '/^## \[Unreleased\]/ {exit} {print}' CHANGELOG.md
            echo "## [Unreleased]"
            echo ""
            echo "---"
            echo ""
            echo "$NEW_RELEASE_SECTION"
            echo ""
            if [ -n "$COMBINED_CONTENT" ]; then
              echo "$COMBINED_CONTENT"
            else
              echo "No changes recorded."
            fi
            echo ""
            PREV_VERSION=$(git --no-pager tag -l --sort=-v:refname | grep -v "^${VERSION}$" | head -n 1)
            if [ -n "$PREV_VERSION" ]; then
              echo "**Full Changelog**: https://github.com/${GITHUB_REPOSITORY}/compare/${PREV_VERSION}...${VERSION}"
            else
              echo "**Full Changelog**: https://github.com/${GITHUB_REPOSITORY}/commits/${VERSION}"
            fi
            echo ""
            echo "---"
            echo ""
            awk '
              BEGIN { found_separator=0 }
              /^---$/ {
                if (!found_separator) { found_separator=1; next }
              }
              found_separator { print }
            ' CHANGELOG.md
          } > "$TMP_FILE"

          mv "$TMP_FILE" CHANGELOG.md
          echo "Updated CHANGELOG.md for ${VERSION}"

      - name: Commit changes locally (if any)
        id: commit
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          if git diff --quiet CHANGELOG.md; then
            echo "changed=false" >> $GITHUB_OUTPUT
          else
            git add CHANGELOG.md
            git commit -m "chore(changelog): update for release ${{ steps.rel.outputs.tag }}"
            echo "changed=true" >> $GITHUB_OUTPUT
          fi

      - name: Create PR for changelog update
        if: steps.commit.outputs.changed == 'true'
        uses: peter-evans/create-pull-request@v6
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          commit-message: "chore(changelog): update for release ${{ steps.rel.outputs.tag }}"
          title: "Update CHANGELOG for ${{ steps.rel.outputs.tag }}"
          body: |
            Automated changelog update for **${{ steps.rel.outputs.tag }}**.
            - Created by workflow: _Update Changelog_
          branch: chore/update-changelog/${{ steps.rel.outputs.tag }}
          base: main
          labels: |
            chore
            ignore-for-release
